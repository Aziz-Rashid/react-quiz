{"version":3,"sources":["images/spinner.gif","API.ts","utils.ts","components/QuestionCard.styles.ts","components/Question.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","Question","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","key","correctAnswer","disabled","value","onClick","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","inp","setinp","yes","setyes","select","setselect","TOTAL_QUESTIONS","console","log","Quiz","EASY","newQuestions","React","counter","setCounter","useEffect","timer","setInterval","clearInterval","type","onChange","e","target","placeholder","Button","variant","color","length","src","spinner","alt","width","undefined","currentTarget","prev","answerObject","nextQ","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bec4e676.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.bbf63906.gif\";","import { shuffleArray } from './utils';\n\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\n\nexport enum Difficulty {\n  EASY = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\",\n}\n\nexport type QuestionsState = Question & { answers: string[] };\n\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty): Promise<QuestionsState[]> => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n  const data = await (await fetch(endpoint)).json();\n  return data.results.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\n  }))\n};\n","export const shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5);\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  background: #ebfeff;\n  border-radius: 10px;\n  border: 2px solid #0085a3;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n\n  p {\n    font-size: 1rem;\n  }\n`;\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n\n  :hover {\n    opacity: 0.8;\n  }\n\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    background: ${({ correct, userClicked }) =>\n      correct\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\n        : !correct && userClicked\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\n    border: 3px solid #ffffff;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n  }\n`;\n","import React from 'react';\nimport { AnswerObject } from '../App';\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\n\nimport '../app.css'\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNr: number;\n  totalQuestions: number;\n};\n\nconst Question: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  userAnswer,\n  questionNr,\n  totalQuestions,\n}) => (\n  <Wrapper className=\"a\">\n    <p className='number'>\n      Questions: {questionNr} / {totalQuestions}\n    </p>\n    <p dangerouslySetInnerHTML={{ __html: question }} />\n    <div >\n      {answers.map((answer) => (\n        <ButtonWrapper\n          key={answer}\n          correct={userAnswer?.correctAnswer === answer}\n          userClicked={userAnswer?.answer === answer}\n        >\n          <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\n            <span dangerouslySetInnerHTML={{ __html: answer }} />\n          </button>\n        </ButtonWrapper>\n      ))}\n    </div>\n  </Wrapper>\n);\n\nexport default Question;\n","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API';\nimport Question from './components/Question';\nimport { QuestionsState, Difficulty } from './API';\nimport './app.css'\nimport Button from '@material-ui/core/Button';\nimport spinner from './images/spinner.gif'\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n \n\nconst App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionsState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [inp,setinp] = useState(3)\n  const [yes,setyes] = useState(false)\n  const [select,setselect] = useState({})\n  let TOTAL_QUESTIONS = inp;\n  const change = (e:any) =>{\n    setinp(e.target.value)\n  }\n  const setdata = () =>{\n    if(inp > 3){\n      setyes(true)\n    }\n  }\n  const opt = (e:any) =>{\n      setselect(e.target.value)\n  }\n  console.log(select)\n  const Quiz = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: any) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      if (correct) setScore((prev) => prev + 1);\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n  \n  const nextQuestion = () => {\n    const nextQ = number + 1;\n\n    if (nextQ === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQ);\n    }\n  };\n  const [counter, setCounter] = React.useState(500);\n  React.useEffect(() => {\n    const timer:any = counter > 0 && setInterval(() => setCounter(counter - 1), 1000);\n    return () => clearInterval(timer);\n  }, [counter]);\n  if(yes === false  ){\n    return(\n\n    <div className=\"maindiv\">\n      <h3 className=\"heading\">Select your quiz questions and Difficulty!</h3>\n      <input className=\"main\" type=\"number\" onChange={change} placeholder=\"How much questions you want to solve!\"/>\n      <p className=\"para\">select your quiz Difficulty!</p>\n      <select onChange={opt} className=\"option\">\n        <option value={\"EASY\"}>Easy</option>\n        <option  value={\"MEDIUM\"}>MEDIUM</option>\n        <option value={\"HARD\"}>HARD</option>\n      </select>\n      <div className=\"div\">\n      <Button className=\"bt\" variant=\"contained\" color=\"primary\" onClick={setdata}>click me </Button>\n      </div></div>\n    )\n  }\n  return (\n    <div className=\"bg\">\n      <h1 >Quiz app! </h1>\n      \n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n        <div >\n          <Button className=\"btn\" variant=\"contained\" color=\"primary\" onClick={Quiz}>\n            Start Quiz\n              </Button>\n        </div>\n      ) : null}\n      {!gameOver ? <div><h1 className='score'>Score: {score}</h1> <h3 className=\"time\">Time Remaining: {counter}</h3></div>  : null}\n     \n      {loading ? <img src={spinner} alt=\"\"  width=\"50%\"/> : null}\n      {!loading && !gameOver && (\n        <Question\n          questionNr={number + 1}\n          totalQuestions={TOTAL_QUESTIONS}\n          question={questions[number].question}\n          answers={questions[number].answers}\n          userAnswer={userAnswers ? userAnswers[number] : undefined}\n          callback={checkAnswer}\n        />\n      )}\n      {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n        <Button className=\"btn\" variant=\"contained\" color=\"primary\" onClick={nextQuestion}>\n          Next Question\n        </Button>\n      ) : null}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  type Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n  };\n  \n  export function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(\n        process.env.PUBLIC_URL,\n        window.location.href\n      );\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' }\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.register();"],"sourceRoot":""}